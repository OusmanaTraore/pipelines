// on lance les jobs sur le slave Jenkins

node('slavejenkins') {

// on définit les variables d'environnement pour l'image Docker avec un credential pour se connecter à Docker hub

    def  registry = "jpgibart/projet_cd_test"
    def  registryCredential = 'dockerhub'
    def  dockerImage = ''

//on réalise un pseudo hook sur TOUS les gits du projet ci-dessous toutes les minutes

    properties([pipelineTriggers([pollSCM('* * * * *')])])


//premier stage : on récupère le pipeline dans notre projet

    stage('recup sur Git du Jenkinsfile'){       
        git url: 'https://gitlab.com/projetcd/pipelines.git'
    } 
        
//on va chercher la branche develop de notre appli sur git et on la build avec maven        
        
    stage('recup Git du prejet') {
        // pour le test, on va chercher la branche develop
        git branch: 'develop', url: 'https://gitlab.com/projetcd/devopsapp.git'
    }

    stage('build maven du projet') {        
        withMaven(
        
            // la config est dansJenkins "Global Tool Configuration"
            
            maven: 'maven') {

            // on build le war
            
            sh "mvn clean package"
        }
    }

//on va rechercher le Dockerfile par un git

    stage('recup git du Dockerfile') {
        
        // on git notre projet again pour recup le Dockerfile
        
        git url: 'https://gitlab.com/projetcd/pipelines.git'
        
        //on ajoute le war dans notre image docker
        
        sh "echo '\nCOPY target/devops-1.0.war /bin' >> Dockerfile"
    }

//on build l'image docker avec un tag de version jenkins

    stage('Build image docker') {        
        script {
            dockerImage = docker.build(registry + ":${currentBuild.number}", ".")        
        }
    }
    
//on push l'image sur Dockerhub

    stage('Push image docker'){
        script{
            docker.withRegistry('', registryCredential){
                dockerImage.push()             
            }
        } 
    }
    
//on va encore rechercher notre projet pour obtenir notre playbook
    
    stage('recup playbook Git'){       
                git url: 'https://gitlab.com/projetcd/pipelines.git'
    }
    
//on change la version à déployer dans le playbook avec un sed
    
    stage('config du playbook') {
        
        sh "sed -i 's/projet_cd_test/projet_cd_test:${currentBuild.number}/' playbook_test.yml"
    }

//on déploie sur le serveur de test avec Ansible

    stage('Deploiement Ansible test') {
        ansiblePlaybook (
            colorized: true, 
            become: true,
            playbook: 'playbook_test.yml',
            inventory: 'inventory.ini'
        )
    }
}
